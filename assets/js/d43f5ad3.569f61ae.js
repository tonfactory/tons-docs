"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[447],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,y=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(y,l(l({ref:t},c),{},{components:n})):r.createElement(y,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7474:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:7},l="Development",s={unversionedId:"usage/development",id:"usage/development",title:"Development",description:"A person can deploy smart-contracts using tons and tonsdk.",source:"@site/docs/usage/development.md",sourceDirName:"usage",slug:"/usage/development",permalink:"/tons-doc-test/usage/development",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Contract",permalink:"/tons-doc-test/usage/contract"},next:{title:"toncli",permalink:"/tons-doc-test/usage/toncli"}},i={},p=[{value:"integrations",id:"integrations",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"development"},"Development"),(0,a.kt)("p",null,"A person can deploy smart-contracts using tons and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tonfactory/tonsdk"},"tonsdk"),".\nThere are three options: send-boc, send-internal and send-external."),(0,a.kt)("p",null,"Send internal allows a user to send any internal message using any of their wallets"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons dev send-internal ./scripts/deploy.py deploy_through_internal MY_WALLET_NAME 0.1 --wait\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# ./scripts/deploy.py example. \n# Function must receive WalletContract and  return (str, Optional[Cell], Optional[Cell]) values.\n\nfrom typing import Optional\n\nfrom tonsdk.contract.wallet import WalletContract\nfrom tonsdk.boc import Cell\nfrom tonsdk.contract.token.ft import JettonMinter\n\n\ndef deploy_through_internal(wallet: WalletContract) -> (str, Optional[Cell], Optional[Cell]):\n    minter = JettonMinter(admin_address=wallet.address,\n                          jetton_content_uri="URL",\n                          jetton_wallet_code_hex=\'CODE\')\n\n    return minter.address.to_string(), minter.create_state_init()["state_init"], None\n')),(0,a.kt)("p",null,"Send external allows a user to create an external message using tonsdk and send it to the TON blockchain"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons dev send-external ./scripts/deploy.py deploy_through_external --wait\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# ./scripts/deploy.py example. \n# Function must receive nothing and return (str, Cell) values.\nfrom tonsdk.contract.wallet import WalletContract, WalletVersionEnum, Wallets\nfrom tonsdk.boc import Cell\n\n\ndef deploy_through_external() -> (str, Cell):\n    wallet_workchain = 0\n    wallet_version = WalletVersionEnum.v3r2\n    wallet_mnemonics = "YOUR 24 ... WORDS".split(" ")\n\n    _mnemonics, _pub_k, _priv_k, wallet = Wallets.from_mnemonics(\n        wallet_mnemonics, wallet_version, wallet_workchain)\n    return wallet.address.to_string(), wallet.create_init_external_message()["message"]\n')),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Note: to deploy a wallet one can use '$ tons wallet init WALLET_NAME'")),(0,a.kt)("p",null,"Send boc allows to send a .boc file to the TON blockchain"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons dev send-boc ./generated-through-fif.boc --wait\n")),(0,a.kt)("h3",{id:"integrations"},"integrations"),(0,a.kt)("p",null,"Example of automatic salary payment, you may use cron to run pay_salary.sh"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'$ cat employee.info\nemployee1 EQDvtizebIVTGYASXgjYX5sHfkGLW8aFTa7wfYCyARIpARB0 10\nemployee2 EQA-Ri7Oftdjq--NJmuJrFJ1YqxYk6t2K3xIFKw3syhIUgUe 20\nemployee3 EQCNLRRZkvoqAW6zwYyy_BVwOBcMnwqvyrSpm8WnACdzXuu3 15.5\n\n$ cat pay_salary.sh\ncd ~/team_workspace/ton/\nsource venv/bin/activate\ntons config tons.keystore_name myKeystore\n\ninput="./employees.info"\nwhile IFS= read -r line\ndo\n    stringarray=($line)\n    name=${stringarray[0]}\n    addr=${stringarray[1]}\n    salary=${stringarray[2]}\n\n    tons wallet transfer salaryWallet $name $salary --wait\ndone < "$input"\n')))}m.isMDXComponent=!0}}]);