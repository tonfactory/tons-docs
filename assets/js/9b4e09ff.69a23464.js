"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[473],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,k=u["".concat(i,".").concat(f)]||u[f]||m[f]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=f;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2220:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},l="Config",s={unversionedId:"usage/config",id:"usage/config",title:"Config",description:"tons uses the following file structure:",source:"@site/docs/usage/config.md",sourceDirName:"usage",slug:"/usage/config",permalink:"/tons-doc-test/usage/config",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Quick start",permalink:"/tons-doc-test/usage/quick-start"},next:{title:"Keystore",permalink:"/tons-doc-test/usage/keystore"}},i={},p=[],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"config"},"Config"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"tons")," uses the following file structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},".tons\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 whitelist.json\n\u251c\u2500\u2500 keystores\n\u2502   \u251c\u2500\u2500 *.keystore\n")),(0,a.kt)("p",null,"Every time ",(0,a.kt)("strong",{parentName:"p"},"tons")," reads settings in the way where a next config alters previous one"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"global"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"~/.config/tons/")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"local"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"./..N/.tons/")," (where N {0, inf} any number of subdirectories)\n",(0,a.kt)("em",{parentName:"li"},"Note: to init tons locally run 'tons init' command")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("em",{parentName:"li"},"env"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"export TONS_CONFIG_PATH=~/your/own/path/.tons/"))),(0,a.kt)("p",null,"All config.yaml parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"tons.workdir"),(0,a.kt)("td",{parentName:"tr",align:"left"},"directory where whitelist and keystores are stored")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"tons.keystore_name"),(0,a.kt)("td",{parentName:"tr",align:"left"},"name of the keystore a person wants to use")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"tons.provider"),(0,a.kt)("td",{parentName:"tr",align:"left"},"provider to access the TON blockchain")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"tons.default_wallet_version"),(0,a.kt)("td",{parentName:"tr",align:"left"},"the version that will be used during tons wallet create cmd")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"tons.warn_if_outdated"),(0,a.kt)("td",{parentName:"tr",align:"left"},"every run checks whether there is a new version of tons pkg")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"provider.dapp.api_key"),(0,a.kt)("td",{parentName:"tr",align:"left"},"api key for the dapp (TODO: type bot's name)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"provider.dapp.network"),(0,a.kt)("td",{parentName:"tr",align:"left"},"TON network to use (mainnet/testnet)")))),(0,a.kt)("p",null,"List parameters of all configs (global/local/env)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons config --list\n...\n~/local/path/.tons/config.yaml  tons.keystore_name=dev.keystore\n...\n~/.config/.tons/config.yaml tons.keystore_name=global.keystore\n")),(0,a.kt)("p",null,"List all values of final altered config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons config --current-setup\ntons.workdir=/Users/username/.config/.tons\ntons.keystore_name=dev.keystore\ntons.provider=dapp\ntons.default_wallet_version=v3r2\ntons.warn_if_outdated=True\nprovider.dapp.api_key=YOUR_API_KEY\nprovider.dapp.network=testnet\n")),(0,a.kt)("p",null,"Change the network"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons config --network testnet\n")),(0,a.kt)("p",null,"Set value of a parameter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons config --global tons.keystore_name myKeystore2\n")),(0,a.kt)("p",null,"Unset value of a parameter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons config --local tons.keystore_name --unset\n")),(0,a.kt)("p",null,"Get value of a parameter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ tons config tons.keystore_name\ndev.keystore\n")))}m.isMDXComponent=!0}}]);